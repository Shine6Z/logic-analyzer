This is logic_analyzer.info, produced by makeinfo version 4.13 from
logic_analyzer.texi.

INFO-DIR-SECTION Electronics
START-INFO-DIR-ENTRY
* logic_analyzer_rpi: (logic_analyzer)
END-INFO-DIR-ENTRY


File: logic_analyzer.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

logic analyzer RPi
******************

Use your Raspberry Pi as a logic analyzer

   Copyright (C) 2012-13 Yves Renier

   This package is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

   This package is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

   You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>

* Menu:

* Introduction::
* Usage::


File: logic_analyzer.info,  Node: Introduction,  Next: Usage,  Prev: Top,  Up: Top

1 Introduction
**************

'logic analyzer RPi' is a software to capture logic states at with the
Raspberry Pi's GPIO pins.  It is possible to Save/Load capture files
and to decode supported protocols.


File: logic_analyzer.info,  Node: Usage,  Prev: Introduction,  Up: Top

2 Usage
*******

The usage of the `logic_analyzer' command line is

   	logic_analyzer [-h] [-v LEVEL] [-w SEC] [-d PROTOCOL]  <[-l
FILE] | [-c PINS [-i MS] [-n NPOINT]]> <[-s FILE]|[-p FILE]>

   `-h' `--help' Show summary of options.

   `-v LEVEL' `--verbose=LEVEL' Set the verbosity to LEVEL (0 to 4,
higher means more messages,default is 3).

   `-w SEC' `--wait=SEC' Wait the specified number of seconds before
capturing.

   `-d PROTOCOL' `--decode=PROTOCOL' Decode according to PROTOCOL.
available protocols are :
   * microwire

   * raw

   `-l FILE' `--load=FILE' Load FILE instead of capturing.

   `-c PINS' `--capture=PINS' Capture using given PINS. Pins must be
the GPIO numbers separated by `,' or ` '. Space may be used if le
string pins is protected by `""'. ex `14,15,27,4' or `"14 15 27 4"'.
Order may be inportant if `--decode' is used depending on the protocol.

   `-i MS' `--interval=MS' Interval between 2 logic state capture in
milliseconds.

   `-n NPOINT' `--npoint=POINT' Number of points to capture.

   `-s FILE' `--save=FILE' Save capture to FILE.

   `-p FILE' `--plot=FILE' Plot into FILE (PNG image).



Tag Table:
Node: Top199
Node: Introduction1064
Node: Usage1357

End Tag Table
